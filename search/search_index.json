{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Django Rest Framework HTTP Serialization A collection of useful Decorators to DRY up your Django Rest Framework when using Serializers Documentation index Overview Installation User guide Views API Reference Examples Contributing","title":"Home"},{"location":"#documentation-index","text":"Overview Installation User guide Views API Reference Examples Contributing","title":"Documentation index"},{"location":"contributing/","text":"Reporting bugs Please use GitHub to raise any bugs or feature requests. Contributing guidelines To contribute to DRF HTTP Serialization, please do the following steps: Clone the repository Ensure your changes are Flake8 compliant Provide tests to support your changes Ensure all tests pass by calling pytest , or tox to run tests across all supported environments Ensure the documentation remains up to date Open a pull request on Github , referencing the relevant issue that your work fixes","title":"Contributing"},{"location":"contributing/#reporting-bugs","text":"Please use GitHub to raise any bugs or feature requests.","title":"Reporting bugs"},{"location":"contributing/#contributing-guidelines","text":"To contribute to DRF HTTP Serialization, please do the following steps: Clone the repository Ensure your changes are Flake8 compliant Provide tests to support your changes Ensure all tests pass by calling pytest , or tox to run tests across all supported environments Ensure the documentation remains up to date Open a pull request on Github , referencing the relevant issue that your work fixes","title":"Contributing guidelines"},{"location":"examples/","text":"HttpSerialization # model user from django.contrib.auth.models import AbstractUser class User(AbstractUser): pass # serializers.py from rest_framework import serializers from drf_http_serialization.models import User class UserInformationSerializer(serializers.ModelSerializer): email = serializers.EmailField() username = serializers.CharField() class Meta: model = User fields = [\"id\", \"email\", \"username\"] With @api_view decorator function from rest_framework.decorators import api_view from drf_http_serialization import HttpSerialization from drf_http_serialization.serializers import UserInformationSerializer @api_view(http_method_names=[\"GET\"]) @HttpSerialization(serializer_cls=UserInformationSerializer) def get_user_func_view(request): return request.user API response { \"data\": { \"id\": 1, \"email\": \"userA@example.com\", \"username\": \"userA\" } } With GenericViewSet class from drf_http_serialization import HttpSerialization from rest_framework.viewsets import GenericViewSet from drf_http_serialization.models import User from drf_http_serialization.serializers import UserInformationSerializer # ... class UserViewSet(GenericViewSet): def get_queryset(self): return User.objects.all() @HttpSerialization(serializer_cls=UserInformationSerializer) def list(self, request, pk): return self.get_queryset() API response { \"count\": 2, \"next\": null, \"previous\": null, \"data\": [ { \"id\": 1, \"email\": \"tom_hiddleston@gmail.com\", \"username\": \"tom_hiddleston\" }, { \"id\": 2, \"email\": \"chris_hemsworth@gmail.com\", \"username\": \"chris_hemsworth\" } ] } With APIView class from rest_framework.views import APIView from drf_http_serialization import HttpSerialization from drf_http_serialization.serializers import UserInformationSerializer class UserAPIView(APIView): @HttpSerialization(serializer_cls=UserInformationSerializer) def get(self, request): return request.user SchemaValidation When validating body data( POST method) from rest_framework.views import APIView from drf_http_serialization import HttpSerialization, SchemaValidation from drf_http_serialization.serializers import UserInformationSerializer from drf_http_serialization.models import User # combination usage class UserAPIView(APIView): @HttpSerialization(serializer_cls=UserInformationSerializer) @SchemaValidation(serializer_cls=UserInformationSerializer, location=\"body\") def create(self, request, data): # data object is validated # the default will use key `data`, if you want to use another key, # add argument to_key=\"something\" in SchemaValidation user = User.objects.create(**data) return user API call POST /api/users HTTP/1.1 Host: 127.0.0.1 Content-Type: application/json Accept: */* { \"email\": \"chris.evans\", \"username\": \"chris_evans\" } API response (422 HTTP status's code) { \"errors\": [ { \"field\": \"email\", \"detail\": [ \"Enter a valid email address.\" ] } ], \"message\": \"Validation Error!\" } When validating query params from drf_http_serialization import HttpSerialization, SchemaValidation from drf_http_serialization.serializers import UserInformationSerializer from drf_http_serialization.models import User from rest_framework.viewsets import GenericViewSet class UserViewSet(GenericViewSet): # combination usage @HttpSerialization(serializer_cls=UserInformationSerializer) @SchemaValidation(serializer_cls=UserInformationSerializer, location=\"query\") def list(self, request, query): # data dict is validated # the default will use key `data`, if you want to use another key, # add argument to_key=\"something\" in SchemaValidation user = User.objects.filter(username=query[\"username\"]) return user API call GET /api/users?email=chris_evans HTTP/1.1 API response(422 HTTP status's code) { \"errors\": [ { \"field\": \"email\", \"detail\": [ \"Enter a valid email address.\" ] } ], \"message\": \"Validation Error!\" } Accept list query params lookup: from drf_http_serialization import HttpSerialization, SchemaValidation from drf_http_serialization.serializers import UserListLookUpSerializer, UserInformationSerializer from drf_http_serialization.models import User from rest_framework.viewsets import GenericViewSet class UserViewSet(GenericViewSet): # combination usage @HttpSerialization(serializer_cls=UserInformationSerializer) @SchemaValidation(serializer_cls=UserListLookUpSerializer, location=\"query\") def list(self, request, query): # query dict is validated # the default will use key `query`, if you want to use another key, # add argument to_key=\"something\" in SchemaValidation user = User.objects.filter(username__in=query[\"username\"]) return user API request GET /api/users?username=chris_evans&username=tom_hiddleston HTTP/1.1 API response { \"count\": 2, \"next\": null, \"previous\": null, \"data\": [ { \"id\": 1, \"email\": \"tom_hiddleston@gmail.com\", \"username\": \"tom_hiddleston\" }, { \"id\": 3, \"email\": \"chris.evans@gmail.com\", \"username\": \"chris_evans\" } ] }","title":"Examples"},{"location":"examples/#httpserialization","text":"# model user from django.contrib.auth.models import AbstractUser class User(AbstractUser): pass # serializers.py from rest_framework import serializers from drf_http_serialization.models import User class UserInformationSerializer(serializers.ModelSerializer): email = serializers.EmailField() username = serializers.CharField() class Meta: model = User fields = [\"id\", \"email\", \"username\"] With @api_view decorator function from rest_framework.decorators import api_view from drf_http_serialization import HttpSerialization from drf_http_serialization.serializers import UserInformationSerializer @api_view(http_method_names=[\"GET\"]) @HttpSerialization(serializer_cls=UserInformationSerializer) def get_user_func_view(request): return request.user API response { \"data\": { \"id\": 1, \"email\": \"userA@example.com\", \"username\": \"userA\" } } With GenericViewSet class from drf_http_serialization import HttpSerialization from rest_framework.viewsets import GenericViewSet from drf_http_serialization.models import User from drf_http_serialization.serializers import UserInformationSerializer # ... class UserViewSet(GenericViewSet): def get_queryset(self): return User.objects.all() @HttpSerialization(serializer_cls=UserInformationSerializer) def list(self, request, pk): return self.get_queryset() API response { \"count\": 2, \"next\": null, \"previous\": null, \"data\": [ { \"id\": 1, \"email\": \"tom_hiddleston@gmail.com\", \"username\": \"tom_hiddleston\" }, { \"id\": 2, \"email\": \"chris_hemsworth@gmail.com\", \"username\": \"chris_hemsworth\" } ] } With APIView class from rest_framework.views import APIView from drf_http_serialization import HttpSerialization from drf_http_serialization.serializers import UserInformationSerializer class UserAPIView(APIView): @HttpSerialization(serializer_cls=UserInformationSerializer) def get(self, request): return request.user","title":"HttpSerialization"},{"location":"examples/#schemavalidation","text":"When validating body data( POST method) from rest_framework.views import APIView from drf_http_serialization import HttpSerialization, SchemaValidation from drf_http_serialization.serializers import UserInformationSerializer from drf_http_serialization.models import User # combination usage class UserAPIView(APIView): @HttpSerialization(serializer_cls=UserInformationSerializer) @SchemaValidation(serializer_cls=UserInformationSerializer, location=\"body\") def create(self, request, data): # data object is validated # the default will use key `data`, if you want to use another key, # add argument to_key=\"something\" in SchemaValidation user = User.objects.create(**data) return user API call POST /api/users HTTP/1.1 Host: 127.0.0.1 Content-Type: application/json Accept: */* { \"email\": \"chris.evans\", \"username\": \"chris_evans\" } API response (422 HTTP status's code) { \"errors\": [ { \"field\": \"email\", \"detail\": [ \"Enter a valid email address.\" ] } ], \"message\": \"Validation Error!\" } When validating query params from drf_http_serialization import HttpSerialization, SchemaValidation from drf_http_serialization.serializers import UserInformationSerializer from drf_http_serialization.models import User from rest_framework.viewsets import GenericViewSet class UserViewSet(GenericViewSet): # combination usage @HttpSerialization(serializer_cls=UserInformationSerializer) @SchemaValidation(serializer_cls=UserInformationSerializer, location=\"query\") def list(self, request, query): # data dict is validated # the default will use key `data`, if you want to use another key, # add argument to_key=\"something\" in SchemaValidation user = User.objects.filter(username=query[\"username\"]) return user API call GET /api/users?email=chris_evans HTTP/1.1 API response(422 HTTP status's code) { \"errors\": [ { \"field\": \"email\", \"detail\": [ \"Enter a valid email address.\" ] } ], \"message\": \"Validation Error!\" } Accept list query params lookup: from drf_http_serialization import HttpSerialization, SchemaValidation from drf_http_serialization.serializers import UserListLookUpSerializer, UserInformationSerializer from drf_http_serialization.models import User from rest_framework.viewsets import GenericViewSet class UserViewSet(GenericViewSet): # combination usage @HttpSerialization(serializer_cls=UserInformationSerializer) @SchemaValidation(serializer_cls=UserListLookUpSerializer, location=\"query\") def list(self, request, query): # query dict is validated # the default will use key `query`, if you want to use another key, # add argument to_key=\"something\" in SchemaValidation user = User.objects.filter(username__in=query[\"username\"]) return user API request GET /api/users?username=chris_evans&username=tom_hiddleston HTTP/1.1 API response { \"count\": 2, \"next\": null, \"previous\": null, \"data\": [ { \"id\": 1, \"email\": \"tom_hiddleston@gmail.com\", \"username\": \"tom_hiddleston\" }, { \"id\": 3, \"email\": \"chris.evans@gmail.com\", \"username\": \"chris_evans\" } ] }","title":"SchemaValidation"},{"location":"installation/","text":"Installation Using pip : $ pip install drf-http-serialization","title":"Installation"},{"location":"installation/#installation","text":"Using pip : $ pip install drf-http-serialization","title":"Installation"},{"location":"overview/","text":"Overview Serializer decorators help you boost your code and decrease duplication by using a higher-order function to reduce the number of lines of code and maintain consistency in your project. Requirements Python (>= 3.7) Django (>= 3.0) Django REST Framework (> 3.11)","title":"Overview"},{"location":"overview/#overview","text":"Serializer decorators help you boost your code and decrease duplication by using a higher-order function to reduce the number of lines of code and maintain consistency in your project.","title":"Overview"},{"location":"overview/#requirements","text":"Python (>= 3.7) Django (>= 3.0) Django REST Framework (> 3.11)","title":"Requirements"},{"location":"usage-api/","text":"Base Parameters serializer_cls (serializers.BaseSerializer|str) The serializer to use paginator (Optional) Default will use pagination in settings file api_settings.DEFAULT_PAGINATION_CLASS() error_messages (Optional[str]) Error message SchemaValidation Reference location (str) The location to validate data(body or header) to_key (Optional[str]) Can be used to pass a custom key for validated data dict","title":"API Reference"},{"location":"usage-api/#base-parameters","text":"serializer_cls (serializers.BaseSerializer|str) The serializer to use paginator (Optional) Default will use pagination in settings file api_settings.DEFAULT_PAGINATION_CLASS() error_messages (Optional[str]) Error message","title":"Base Parameters"},{"location":"usage-api/#schemavalidation","text":"","title":"SchemaValidation"},{"location":"usage-api/#reference","text":"location (str) The location to validate data(body or header) to_key (Optional[str]) Can be used to pass a custom key for validated data dict","title":"Reference"},{"location":"usage-views/","text":"HttpSerialization With @api_view decorator function from rest_framework.decorators import api_view from drf_http_serialization import HttpSerialization from drf_http_serialization.serializers import UserInformationSerializer @api_view(http_method_names=[\"GET\"]) @HttpSerialization(serializer_cls=UserInformationSerializer) def get_user_func_view(request): return request.user With GenericViewSet class from drf_http_serialization import HttpSerialization from rest_framework.viewsets import GenericViewSet from drf_http_serialization.models import User from drf_http_serialization.serializers import UserInformationSerializer # ... class UserViewSet(GenericViewSet): def get_queryset(self): return User.objects.all() @HttpSerialization(serializer_cls=UserInformationSerializer) def list(self, request, pk): return self.get_queryset() With APIView class from rest_framework.views import APIView from drf_http_serialization import HttpSerialization from drf_http_serialization.serializers import UserInformationSerializer class UserAPIView(APIView): @HttpSerialization(serializer_cls=UserInformationSerializer) def get(self, request): return request.user SchemaValidation When validating body data( POST method) from rest_framework.views import APIView from drf_http_serialization import HttpSerialization, SchemaValidation from drf_http_serialization.serializers import UserInformationSerializer from drf_http_serialization.models import User # combination usage class UserAPIView(APIView): @HttpSerialization(serializer_cls=UserInformationSerializer) @SchemaValidation(serializer_cls=UserInformationSerializer, location=\"body\") def create(self, request, data): # data object is validated # the default will use key `data`, if you want to use another key, # add argument to_key=\"something\" in SchemaValidation user = User.objects.create(**data) return user When validating query params from drf_http_serialization import HttpSerialization, SchemaValidation from drf_http_serialization.serializers import UserInformationSerializer from drf_http_serialization.models import User from rest_framework.viewsets import GenericViewSet class UserViewSet(GenericViewSet): # combination usage @HttpSerialization(serializer_cls=UserInformationSerializer) @SchemaValidation(serializer_cls=UserInformationSerializer, location=\"query\") def list(self, request, query): # data dict is validated # the default will use key `data`, if you want to use another key, # add argument to_key=\"something\" in SchemaValidation user = User.objects.filter(username=query[\"username\"]) return user","title":"Views"}]}